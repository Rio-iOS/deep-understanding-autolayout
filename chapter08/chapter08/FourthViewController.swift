//
//  FourthViewController.swift
//  chapter08
//
//  Created by 藤門莉生 on 2024/08/20.
//

import Foundation
import UIKit

final class FourthViewController: UIViewController {
    @IBOutlet private weak var button: UIButton!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupConstraints()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        // 軸やビューごとに制約を分解する
        // 制約のコンフリクトを読み解くもう一つの方法は、
        // 軸やビューごとに制約を分解する方法である。
        // UIViewのconstraintAffectingLayout(for: Axis)は、
        // メッセージを受け取るインスタンスの軸ごとの制約の文字列を返す。
        // 引数として、enum UILayoutConstraintAxisを返す
        print("✅\(button.constraintsAffectingLayout(for: .horizontal))")
        
        // 現在のビューコンポーネント（view）の持つ制約の中で、
        // 指定したビューコンポーネントを対象としている制約を出力できる。
        // コンフリクトした時だけでなく、レイアウト変更時やオブジェクト削除時にも
        // 便利なクラス拡張である。
        print("✅\(view.constraintsReferringView(view: button))")
    }
}

private extension FourthViewController {
    func setupConstraints() {
        // 制約のコンフリクトを読み解く
        // - 制約に対してIdentifierを使う
        // - 軸やビューごとに制約を分解する
        // IBもしくは、コード上で追加することができる。
        // let constraint: NSLayoutConstraint
        // constraint.identifier = "Continue Button"
        // Identifierを、ユニットテストやデバッグ以外の目的で使うことは、
        // あまり多くない。
        // レイアウトが全て完成した後に一気に追加しようとするととても大変なので、
        //気づいた時に徐々に追加していく。
        // 他のエラーメッセージと同様に、<クラス名:メモリアドレス VFL風のレイアウト概要>のフォーマットに従って表示される。
        // レイアウトが正しく実行されないビューやエラーを返しているビューに対して実行することで、問題を見つけやすくなる。
        
        // ビューデバッガー
        // ビューのデバッグをしていると、追加したはずのビューが確認できなかったり、
        // 制約が意図通りのレイアウトをしてくれなかったりする場合がよくある。
        // コンソールを用いたデバッグでは、直感的にエラーの原因を特定することができない場合が多くある。
        // Xcode6からビューデバッガーが追加された。
        // ビューデバッガーはGUIを用いたレイアウトデバッグツールでビューのZ軸方向のレイヤーを視覚的に
        // 確認するだけでなく、あるビューに対する制約を確認したり、レイアウトの階層をツリーで
        // 確認したりすることができる。
        // コードを用いる方法とは違って、システマティックなデバッグは苦手なものの、
        // 視覚を用いた直感的なデバッグをサポートする。
        
        // ビューデバッガーを表示する
        // ビューデバッガーは、アプリの実行中に
        // Xcode下部の[Debug View Hierarchy]ボタンか、
        // あるいは上部ツールバーの[Debug] > [View Debugging] > [Capture View Hierarchy]から表示することができる。
        // 3Dレイアウトが表現される。
        // 表示されるビューを選択すると、画面左部のDebug navigatorビューの階層が
        // ツリー構造で表示される。
        // このツリー上もしくは表示されたビュー上でオブジェクトを選択すると、
        // Xcode右側の[Object Inspector]でそのオブジェクトの詳細を見ることが可能。
        // Object Inspectorでは、上部にクラス名とオブジェクトのアドレスが表示されている。
        // このアドレスに対して、デバッガーコマンドで変更を加えることもできる。
        
        // ビューデバッガーの表示を調整する
        // 移動と拡大縮小
        // ビューデバッガーでは、ドラッグによってプレビューを回転させたり、
        // 動かすことができる。
        // また、トラックパッドであればピンチすることで拡大縮小することができる。
        // 拡大縮小は、ボタンからでも実行可能である。
        // 拡大状態では、2本指でスクロールすることができる。
        // 細い特定のビューの重なりを調べる際には非常に便利である。
        
        // 奥行きの調整
        // Z軸方向のビューの重なりの距離を調整することもできる。
        // スライダを調整すると、Z軸方向のビューオブジェクト間の距離を調整することができる。
        
        // 奥行き方向表示オブジェクトの調整
        // Z軸方向に奥野オブジェクトが重なっている場合は、
        // デバッグが困難になるため、ビューデバッガーではZ軸上の
        // 特定の範囲内にあるビューオブジェクトのみを表示することができる。
        // 中にはプライベートクラスを含んだ直接的には開発者がレイアウトしないものもある。
        // そこで、表示するオブジェクトを絞る機能がビューデバッガーには備わっている。
        // ビューデバッガーの右下に表示されている、
        // 2つの選択箇所が付いたスライダを調整することで、
        // 表示するビューの数を変更できる。
        // 表示されるレイヤの数が少なくなり、デバッグに役立つ情報のみを表示できる。
        
        // 画面外のオブジェクトを表示
        // ビューデバッガーは、画面外にレイアウトされたオブジェクトは表示しない。
        // これらのオブジェクトを表示するためには、
        // 画面下部にあるビューデバッガーメニュー内の
        // [Show Clipped Content]トグルをオンにすることで、
        // clipsToBounds=falseにした時と同じ状態にすることができる。
        
        
        // ビューデバッガーの表示モード
        // ビューデバッガには3つの表示モードが存在する。
        // 1. コンテンツモード
        //   - 実際に表示されるコンテンツのみを表示
        // 2. ワイヤーフレームモード
        //   - 各ビューオブジェクトのフレームのみを表示
        // 3. コンテンツとワイヤーモードの両方
        
        
        // 制約を表示する
        // ビューデバッガーでは、あるオブジェクトに対する制約を表示することもできる。
        // ビューデバッガーメニュー内の[Show Constraints]トグルをオンにし、
        // 対象となるオブジェクトを選択すると、そのビューに関わる制約が表示される。
        // 制約を表示すると、どの制約がレイアウトに影響を与えているか確認できる。
        // ビューデバッガー上で制約を選択すると、
        // Object Inspector上で制約オブジェクトのアドレスや制約を所有する
        // First Item、Relation、Multiplier、Constant、Priorityなど
        // 数値を確認できる。
    }
}
